:: DisplayOptions [nobr]
/* ordered list of options, included in the DisplayParagraph widget in the PassageFooter. you don't need to do anything else with this passage!


first line creates an ordered list
*/
<ol id="OptionList">
/* for each text (key) and passage (value) in $optionmap, capture those things.*/ 
<<for _optiontext, _optionpassage range $optionmap>>
  <<capture _optionpassage, _optiontext>>
  /*
  if _optionpassage[2] (the skill indicating that the option is a check) exists, 
    rewrite _optiontext as [skill + difficulty label]
      ex: [Visual Calculus - Heroic]
    + _optiontext
    put the .check styling to a link with _optiontext as its text.
    sets the $lastoption variable, used in the PassageHeader passage, to _optiontext
    
    args[0] = text for the option.
    _optionspassage[0] = the passage that the option sends you to

    if it's a check:
    1 = difficulty label
    2 - skill being used

    if it's got a flag attached
  
    
    */
  <<if _optionpassage[2] and !Object.keys($flagsMap).includes(_optionpassage[1])>>
         <<set _optiontext to " [" + _optionpassage[1] + "- "  + _optionpassage[2] + "] - " + _optiontext>>
      @@.check.odds;<li>-
        <<link _optiontext _optionpassage[0]>><<set $lastoption to _optiontext>><</link>>
      </li>@@
   otherwise, put the .option style on a link */
  <<elseif Object.keys($flagsMap).includes(_optionpassage[1])>>
      <<set $flagsMap[_optionpassage[1]] to _optionpassage[2]>>
      <li>-
        @@.option;<<link _optiontext _optionpassage[0]>><<set $lastoption to _optiontext>><</link>>@@
      </li>
  <<else>>
      <li>-
        @@.option;<<link _optiontext _optionpassage[0]>><<set $lastoption to _optiontext>><</link>>@@
      </li>
    <</if>>
  <</capture>>
<</for>>
/* closing off ordered list and resetting $optionmap*/
</ol>
<<set $optionmap to new Map()>>